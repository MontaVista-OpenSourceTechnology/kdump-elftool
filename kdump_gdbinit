#
# This file contains a few gdb macros (user defined commands) to extract
# useful information from kernel crashdump (kdump) like stack traces of
# all the processes or a particular process and trapinfo.
#
# Code based on kernel: Documentation/kdump/gdbmacros.txt

define majver
       set $majver = init_uts_ns.name.release[0] - '0'
end
document majver
	Set the variable $majver to the major kernel version
end

define minver
	set $minver = init_uts_ns.name.release[2] - '0'
	if init_uts_ns.name.release[3] != '.'
		set $minver = $minver * 10 + init_uts_ns.name.release[3] - '0'
	end
end
document minver
	Set the variable $minver to the minor kernel version
end

define dmesg
	set $idx = log_first_idx
	while $idx != log_next_idx
		set $entry = (struct printk_log *)(log_buf + $idx)
		if $entry->len == 0
			set $idx = 0
			loop_continue
		end
		set $usecs = $entry->ts_nsec / 1000
		printf "[%05lu.%06lu] ", $usecs / 1000000, $usecs % 1000000
		set $msg = (char *)($entry + 1)
		set $i = 0
		while $i < $entry->text_len
			printf "%c", *($msg + $i)
			set $i = $i + 1
		end
		printf "\n"
		set $idx += $entry->len
	end
end
document dmesg
	print the kernel log buffer
end

define dmesg_old
	set $idx = log_first_idx
	while $idx != log_next_idx
		set $entry = (struct log *)(log_buf + $idx)
		if $entry->len == 0
			set $idx = 0
			loop_continue
		end
		set $usecs = $entry->ts_nsec / 1000
		printf "[%05lu.%06lu] ", $usecs / 1000000, $usecs % 1000000
		set $msg = (char *)($entry + 1)
		set $i = 0
		while $i < $entry->text_len
			printf "%c", *($msg + $i)
			set $i = $i + 1
		end
		printf "\n"
		set $idx += $entry->len
	end
end
document dmesg_old
	print the kernel log buffer on older kernel with struct log
	instead of struct printk_log
end

define prpid
	set $t=$arg0
	set $signal = (struct signal_struct *)($t->signal)
	set $tty = (struct tty_struct *)($signal->tty)

	if ($tty)
		set $tty_name = ($tty.name)
		printf "%d\t%s\t%-16s((struct task_struct *) 0x%llx)\n", \
			$t.pid, $tty_name, $t.comm, $t
	else
		printf "%d\t?\t%-16s((struct task_struct *) 0x%llx)\n", \
			$t.pid, $t.comm, $t
	end
end
document prpid
	print info for a pid given a task struct
end

define prthread
	set $thread=$arg0
	printf "    %d\t((struct task_struct *) 0x%llx)\n", \
			$thread.pid, $thread
end
document prthread
	print info for a thread given a task struct
end

define ps
	set $poff=((size_t)&((struct task_struct *)0)->tasks)
	set $toff=((size_t)&((struct task_struct *)0)->thread_node)
	set $init_p=(struct task_struct *)&init_task
	set $p=$init_p
	printf  "PID\ttty\tCMD\t\tTASK_STRUCT\n"

	while (1)
		prpid $p
		set $init_t=&$p->signal.thread_head
		set $t=$init_t->next
		while ($t != $init_t)
			set $tv=(struct task_struct *)(((char *) $t) - $toff)
			if ($tv != $p)
				prthread $tv
			end
			set $t=$t->next
		end
		set $p=(struct task_struct *)((char *)($p->tasks.next) - $poff)
		if ($p == $init_p)
			loop_break
		end
	end	
end 
document ps
	Print processes and threads.  Threads for a process are indented
	underneath it, with just the pid and task struct.
end

define ps_old
	set $poff=((size_t)&((struct task_struct *)0)->tasks)
	set $toff=((size_t)&((struct task_struct *)0)->thread_group)
	set $init_p=(struct task_struct *)&init_task
	set $p=$init_p
	printf  "PID\ttty\tCMD\t\tTASK_STRUCT\n"

	while (1)
		prpid $p
		set $init_t=&$p->thread_group
		set $t=$init_t->next
		while ($t && $t != $init_t)
			set $tv=(struct task_struct *)(((char *) $t) - $toff)
			if ($tv != $p)
				prthread $tv
			end
			set $t=$t->next
		end
		set $p=(struct task_struct *)((char *)($p->tasks.next) - $poff)
		if ($p == $init_p)
			loop_break
		end
	end
end
document ps_old
	Print processes and threads.  Threads for a process are indented
	underneath it, with just the pid and task struct.  This is for
	older kernels without thread_node in the signal struct.
end

define lsmod
	set $modules=&modules
	set $nextoff=(long) &(((struct module *) 0)->list.next)
	set $head=(long) &modules
	set $modl=(long) modules.next

	majver
	minver

	if (sizeof(long) == 4)
		printf "Name                 Base Addr  Module Data\n"
	else
		printf "Name                 Base Addr          Module Data\n"
	end
	while ($modl != $head)
		set $mod=(struct module *) ($modl - $nextoff)
		if ($majver > 4 || $majver == 4 && $minver >= 4)
			set $corestart = $mod->core_layout.base
		else
			set $corestart = $mod->module_core
		end
		if (sizeof(long) == 4)
		    printf "%-20s 0x%08llx ((struct module *) 0x%08llx)\n", \
			$mod->name, $corestart, $mod
		else
		    printf "%-20s 0x%016llx ((struct module *) 0x%016llx)\n", \
			$mod->name, $corestart, $mod
		end
		set $modl=(long) $mod->list.next
	end
end
document lsmod
	print list of modules and their info
end

python
class PrintOptOffset(gdb.Command):
   """print offset of arg0.arg1 if arg1 exists in struct arg0."""

   def __init__(self):
      gdb.Command.__init__(self, "print_opt_offset", gdb.COMMAND_NONE)

   def invoke(self, arg, from_tty):
      args = gdb.string_to_argv(arg)
      if len(args) != 2:
         raise Exception("print_opt_offset takes two arguments")
      if args[1] in gdb.execute("ptype struct " + args[0], to_string=True):
         gdb.execute('printf "OFFSET(%s.%s)=%%ld\\n", &((struct %s *) 0)->%s'
	             % (args[0], args[1], args[0], args[1]))

class PrintOptSym(gdb.Command):
   """print address of the given symbol if it exists."""

   def __init__(self):
      gdb.Command.__init__(self, "print_opt_sym", gdb.COMMAND_NONE)

   def invoke(self, arg, from_tty):
      args = gdb.string_to_argv(arg)
      if len(args) != 1:
         raise Exception("print_opt_sym takes one argument")
      try:
         gdb.execute('printf "SYMBOL(%s)=%%p\\n", &%s' % (args[0], args[0]))
      except:
         pass

class PrintOptLength(gdb.Command):
   """print length of the given symbol if it exists."""

   def __init__(self):
      gdb.Command.__init__(self, "print_opt_length", gdb.COMMAND_NONE)

   def invoke(self, arg, from_tty):
      args = gdb.string_to_argv(arg)
      if len(args) != 1:
         raise Exception("print_opt_length takes one argument")
      try:
         gdb.execute('printf "LENGTH(%s)=%%p\\n", sizeof(%s)' % (args[0], args[0]))
      except:
         pass

class PrintOptSize(gdb.Command):
   """print size of the given structure if it exists."""

   def __init__(self):
      gdb.Command.__init__(self, "print_opt_size", gdb.COMMAND_NONE)

   def invoke(self, arg, from_tty):
      args = gdb.string_to_argv(arg)
      if len(args) != 1:
         raise Exception("print_opt_size takes one argument")
      try:
          gdb.execute('printf "SIZE(%s)=%%d\n", sizeof(struct %s)' % (args[0], args[0]))
      except:
         pass

class PrintOptNum(gdb.Command):
   """print value of the given numberic value if it exists."""

   def __init__(self):
      gdb.Command.__init__(self, "print_opt_num", gdb.COMMAND_NONE)

   def invoke(self, arg, from_tty):
      args = gdb.string_to_argv(arg)
      if len(args) != 1:
         raise Exception("print_opt_num takes one argument")
      try:
         gdb.execute('printf "NUMBER(%s)=%%d\\n", (int) %s' % (args[0], args[0]))
      except:
         pass

PrintOptOffset()
PrintOptSym()
PrintOptNum()
PrintOptSize()
PrintOptLength()
end


define thread_vminfo_base
	printf "SYMBOL(init_task)=%p\n", &init_task
	printf "OFFSET(task_struct.stack)=%ld\n", &((struct task_struct *) 0)->stack
	printf "OFFSET(task_struct.tasks)=%ld\n", &((struct task_struct *) 0)->tasks
	printf "OFFSET(task_struct.thread_group)=%ld\n", &((struct task_struct *) 0)->thread_group
	print_opt_offset task_struct thread_node
	print_opt_offset signal_struct thread_head
	printf "OFFSET(task_struct.signal)=%ld\n", &((struct task_struct *) 0)->signal
	printf "OFFSET(task_struct.pid)=%ld\n", &((struct task_struct *) 0)->pid
	printf "OFFSET(task_struct.thread)=%ld\n", &((struct task_struct *) 0)->thread
	printf "SIZE(pt_regs)=%ld\n", sizeof(struct pt_regs)
end
document thread_vminfo_base
	Dump information required by kdump-elftool to create a gdb thread
	per kernel thread instead of the default gdb thread per CPU.
	The vmlinux (with debugging) for the file must be loaded, but
	the kernel dump is not required.

	This is the base version that the arch-specific versions call
end

define thread_vminfo_mips
	thread_vminfo_base
	printf "SYMBOL(resume)=%lx\n", resume
end
document thread_vminfo_mips
	Dump information required by kdump-elftool to create a gdb thread
	per kernel thread instead of the default gdb thread per CPU.
	This is the MIPS version.  See thread_vminfo_base for more
	details.
end

define thread_vminfo_x86_64
	thread_vminfo_base
	printf "OFFSET(thread_struct.sp)=%ld\n", &((struct thread_struct *) 0)->sp
	printf "SYMBOL(__thread_sleep_point)=0\n"
	printf "SIZE(__switch_rsp_rbp_offset)=1\n"
	printf "SIZE(context_switch_frame)=1\n"
	printf "SYMBOL(__thread_sleep_caller)=0\n"
end
document thread_vminfo_x86_64
	Dump information required by kdump-elftool to create a gdb thread
	per kernel thread instead of the default gdb thread per CPU.
	This is the x86_64 version.  See thread_vminfo_base for more
	details.

	Make sure to fix SIZE(context_switch_frame) and possibly
	SYMBOL(__thread_sleep_point) to be the actual values for your
	system.  Read the man page for details.
end

define thread_vminfo_arm
	thread_vminfo_base
	printf "OFFSET(thread_info.cpu_context)=%ld\n", &((struct thread_info *) 0)->cpu_context
	printf "SYMBOL(__switch_to)=%lx\n", __switch_to
end
document thread_vminfo_arm
	Dump information required by kdump-elftool to create a gdb thread
	per kernel thread instead of the default gdb thread per CPU.
	This is the ARM version.  See thread_vminfo_base for more
	details.
end

define thread_vminfo_arm64
	thread_vminfo_base
	printf "OFFSET(thread.cpu_context)=%ld\n", &((struct thread_struct *) 0)->cpu_context
end
document thread_vminfo_arm
	Dump information required by kdump-elftool to create a gdb thread
	per kernel thread instead of the default gdb thread per CPU.
	This is the ARM64 version.  See thread_vminfo_base for more
	details.
end

define thread_vminfo_i386
	thread_vminfo_base
	printf "OFFSET(thread_struct.sp)=%ld\n", &((struct thread_struct *) 0)->sp
	printf "OFFSET(thread_struct.ip)=%ld\n", &((struct thread_struct *) 0)->ip
end
document thread_vminfo_i386
	Dump information required by kdump-elftool to create a gdb thread
	per kernel thread instead of the default gdb thread per CPU.
	This is the i386 version.  See thread_vminfo_base for more
	details.
end

define vminfo_qemu_base
	print_opt_sym vmcoreinfo_data
	printf "OSRELEASE=%s\n", init_uts_ns.name.release
	printf "SIZE(list_head)=%ld\n", sizeof(struct list_head)
	printf "OFFSET(list_head.next)=%ld\n", &((struct list_head *) 0)->next
	printf "OFFSET(list_head.prev)=%ld\n", &((struct list_head *) 0)->prev
	printf "SYMBOL(_stext)=%lx\n", _stext
	print_opt_sym idt_table
	print_opt_sym per_cpu__current_task
	printf "PAGESIZE=4096\n"
	print_opt_num NR_FREE_PAGES
	print_opt_sym swapper_pg_dir
	print_opt_sym init_level4_pgt
	print_opt_sym init_top_pgt
end
document vminfo_qemu_base
	Print out the basic vminfo file needed to read a QEMU
	memdump.  It must have been compiled with crash dumps
	on, but a crash kernel doesn't have to be loaded.
end

define vminfo_qemu_all
	vminfo_qemu_base

	# CONFIG_NEED_MULTIPLE_NODES
	print_opt_sym mem_map
	print_opt_sym contig_page_data
	print_opt_sym node_data
	printf "LENGTH(node_data)=??\n"
	print_opt_length node_data
	# CONFIG_SPARSEMEM
	print_opt_sym mem_section
	printf "LENGTH(mem_section)=??\n"
	print_opt_size mem_section
	print_opt_offset mem_section section_mem_map
	#CONFIG_FLAT_NODE_MEM_MAP
	print_opt_offset pglist_data node_mem_map

	#Other optional based on kernel version
	print_opt_offset page _mapcount
	print_opt_offset page _count
	# _count was renamed _refcount in 4.6 */
	print_opt_offset page _refcount
	print_opt_offset page compound_head
	print_opt_offset page private
	print_opt_num PAGE_BUDDY_MAPCOUNT_VALUE
	print_opt_num PG_poison

	print_opt_size page
	print_opt_size pglist_data
	print_opt_size zone
	print_opt_size free_area
	print_opt_offset page flags
	print_opt_offset page mapping
	print_opt_offset page lru
	print_opt_offset pglist_data node_zones
	print_opt_offset pglist_data nr_zones
	print_opt_offset pglist_data node_start_pfn
	print_opt_offset pglist_data node_spanned_pages
	print_opt_offset pglist_data node_id
	print_opt_offset zone free_area
	print_opt_offset zone vm_stat
	print_opt_offset zone spanned_pages
	printf "LENGTH(zone.free_area)=??\n"
	print_opt_offset free_area free_list
	printf "LENGTH(free_area.free_list)=??\n"
	print_opt_num PG_lru
	print_opt_num PG_slab
	print_opt_num PG_private
	print_opt_num PG_swapcache
end
document vminfo_qemu_all
	Dump all the vminfo information needed to process a coredump.
	Note that the LENGTH fields are not set, there is no way to find
	them from a vmlinux file, you have to figure them out yourself
	and set them.
end
